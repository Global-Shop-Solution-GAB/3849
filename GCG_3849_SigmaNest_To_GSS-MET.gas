Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start

Program.Sub.Preflight.End

Program.Sub.Main.Start

'//************************************************************************************************************
' This script is for reading feedback from Sigma Nest, for Labor Hours, Piece Counts, and
' Material usage.  For Labor and Piece Counts, an employee ID should be created.  The file that
' will be read will be a 36 field comma delimited file with fields:
' JOBNUMBER, PROGRAMNUMBER, PARTNUMBER, QTYORDERED, QTYCompleted,
' PartCuttingTimeOnePart_Hrs, NESTEDAREA_in_Ea_Part, NESTEDWEIGHT_Lbs, SHEETNAME,
' PROGRAM_SCRAP_PERCENTAGE, MACHINE, SHT_LOCATION, SHT_HEATNUM, SHT_BinNum,
' SHT_Mil, PRT_Data1, PRT_Data2, PRT_Data3, PRT_Data4, PRT_Data5, PRT_Data6, PRT_Data7,
' PRT_Data8, PRT_Data9, PRT_Data10, PRT_Data11, PRT_Data12, PRT_Data13, PRT_Data14,
' Sht_Total_Area, True_Part_Weight, MachineNumber, Sht_PrimeCode, UsedArea, TaskName, QtyNested
'
' The script can also be setup in the Task scheduler, to run unattended, but this version assumes
' user interaction.  User control is recommended during testing, to be able to evaluate update results
' as they occur.
'************************************************************************************************************//
V.Local.Export.Declare(String)
V.Local.exists.Declare(Boolean)

' verify the license
F.Intrinsic.Control.CallSub(Licenseverification)
' find the file path
F.Intrinsic.Control.CallSub(Filepath)

' imported files will go into the V.Args.FILELOC\\Processed Directory.  If not found, create it.
'took out the \\ before Processed
F.Intrinsic.String.Concat(V.Args.FILELOC,"Processed",V.Local.Export)
F.Intrinsic.File.DirExists(V.Local.Export,V.Local.Exists)
F.Intrinsic.Control.If(V.Local.exists,=,False)
	F.Intrinsic.File.CreateDir(V.Local.Export)
F.Intrinsic.Control.EndIf

' run the process
F.Intrinsic.Control.CallSub(Get_file,"FILELOC",V.Args.FILELOC,"EMPLOYEE",V.Args.EMPLOYEE)
' end the script
F.Intrinsic.Control.End


Program.Sub.Main.End

Program.Sub.Get_File.Start
F.Intrinsic.Control.SetErrorHandler("Get_File_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSel.Declare(String)
V.Local.sSNFilePath.Declare(String)
V.Local.sSNFiles.Declare(String)
V.Local.sFilename.Declare(String)
V.Local.sFileList.Declare(String)
V.Local.FileDetail.Declare(String)
V.Local.items.Declare(String)
V.Local.count.Declare(Long)
V.Local.Lcount.Declare(Long)
V.Local.wo.Declare(String)
V.Local.Lines.Declare(String)
V.Local.ExportName.Declare(String)
V.Local.dHours.Declare(Date)
V.Local.fHours.Declare(Float)
V.Local.fQty.Declare(Float)
V.Local.date.Declare(String)
V.Local.sEmployee.Declare(String)
V.Local.job.Declare(String)
V.Local.suffix.Declare(String)
V.Local.seq.Declare(String)
V.Local.sWC.Declare(String)
V.Local.sHours.Declare(String)
V.Local.sClosed.Declare(String)
V.Local.sDirect.Declare(String)
V.Local.sTimeIn.Declare(String)
V.Local.sTimeOut.Declare(String)
V.Local.sRateType.Declare(String)
V.Local.sGood.Declare(String)
V.Local.sScrap.Declare(String)
V.Local.sReason.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sQty.Declare(String)
V.Local.sLaborData.Declare(String)
V.Local.sLaborFile.Declare(String)
V.Local.sMaterialData.Declare(String)
V.Local.sMaterialFile.Declare(String)
V.Local.bFileExists.Declare(Boolean)
V.Local.sMsg.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSerial.Declare(String)
V.Local.fNestArea.Declare(Float)
V.Local.fSheetArea.Declare(Float)
V.Local.sSheet.Declare(String)
V.Local.sOriginialSheetName.Declare(String)
V.Local.sOriginialSheetArea.Declare(Float)
V.Local.sHeat.Declare(String)

' NOTE: all information will be on a delmited file.  This sub could be re-written to just reference the elements of the line.
' I have put everything in it's own variable, to help with understanding what information is used.

Function.Odbc.Connection!Conx.Openconnection(Variable.Ambient.pDSN,Variable.Ambient.PUser,Variable.Ambient.PPass)

' Get list of all files in the directory.  If no files are found, exit program.
' This script assumes that any file within the specifid directory is an SN feedback file
' so any file found will be processed.
F.Intrinsic.File.GetFileList(V.Args.FILELOC,1,V.Local.sFileList)
F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sSNFiles)
F.Intrinsic.Control.If(V.Local.sSNFiles(0),=,"")
	F.Intrinsic.UI.Msgbox("No Sigma Nset Files To Load")
'	F.Intrinsic.Control.CallSub(Unload)
	F.Intrinsic.Control.GoTo("EXIT")
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.InvokeWaitDialog("Reading Records from Sigma Nest")
' for each file
F.Intrinsic.Control.For(V.Local.count,V.Local.sSNFiles.LBound,V.Local.sSNFiles.UBound,1)
	' copy the original file to the export directory and delete the original to prevent overwriting
	F.Intrinsic.String.Concat(V.Args.FILELOC,V.Local.sSNFiles(v.Local.count),V.Local.sFilename)
'take out extra \\ before processed
	F.Intrinsic.String.Concat(V.Args.FILELOC,"Processed\",V.Local.sSNFiles(v.Local.count),V.Local.ExportName)
	F.Intrinsic.File.CopyFile(V.Local.sFilename,V.Local.ExportName)
	F.Intrinsic.File.DeleteFile(V.Local.sFilename)
	' read the file copy
	F.Intrinsic.File.File2String(V.Local.ExportName,V.Local.FileDetail)
	' split to each line
	F.Intrinsic.String.Split(V.Local.FileDetail,V.Ambient.NewLine,V.Local.Lines)
	' for each line; start at line 1 because first line(0) is the header record
	F.Intrinsic.Control.For(V.Local.Lcount,1,V.Local.Lines.UBound,1)
		' split out the different fields
		F.Intrinsic.String.Split(V.Local.Lines(V.Local.Lcount),",",V.Local.items)
		V.Local.items.RedimPreserve(0,35)
		' if the job record is not blank (assuming blank line) then proceed
		F.Intrinsic.Control.If(V.Local.items(0),<>,"")

			' ====LABOR====
'			F.Intrinsic.String.Format(V.Local.items(16),"mmddyy",V.Local.date)
			F.Intrinsic.String.Format(V.Ambient.Date,"mmddyy",V.Local.date)
			' find employee assigned to wc
			F.Intrinsic.String.Concat("select EMPLOYEE from NESTING_EMPL_MACHINE where MACHINE='",V.Local.items(10).Trim,"'",V.Local.sSel)
			F.ODBC.Connection!Conx.OpenRecordsetRO("rstWC",V.Local.sSel)
				F.Intrinsic.Control.If(V.ODBC.Conx!rstWC.EOF,=,False)
					V.Local.sEmployee.Set(V.ODBC.Conx!rstWC.FieldValTrim!EMPLOYEE)
				F.Intrinsic.Control.Else
					V.Local.sEmployee.Set("99999")
				F.Intrinsic.Control.EndIf
			F.ODBC.Conx!rstWC.Close

			' workorder will be Job-Suffix:Seq; split to get each distinct value
			F.Intrinsic.String.Split(V.Local.items(0),":",V.Local.seq)
			' job
			F.Intrinsic.String.Split(V.Local.seq(0),"-",V.Local.wo)
			V.Local.job.Set(V.Local.wo(0))
			' suffix
			V.Local.suffix.Set(V.Local.wo(1))
			' seq
			V.Local.seq.Set(V.Local.seq(1))			
			' workcenter
			V.Local.sWC.Set(V.Local.items(10).Trim)
			' Hours
			V.Local.sHours.Set("0")
			' closed flag
			V.Local.sClosed.Set("")
			' Direct/Indirect flag
			V.Local.sDirect.Set("D")
			' Time In/Out
			' actual time to hte job is determined by start and stop time.  We assume a Start Time of 1:00AM.
			' Stop Time is determined by adding the run time, in minutes, to the Start Time
			' hours from the file
			V.Local.fHours.Set(V.Local.items(5))
			F.Intrinsic.Math.Mult(V.Local.fHours,V.Local.items(4).Float,V.Local.sHours)
			F.Intrinsic.String.Split(V.Local.sHours,".",V.Local.sHours)
			V.Local.sHours.RedimPreserve(0,1)
			F.Intrinsic.String.Build(".{0}",V.Local.sHours(1),V.Local.sHours(1))
			F.Intrinsic.Math.Mult(V.Local.sHours(0).Long,60,V.Local.sHours(0))
			F.Intrinsic.Math.Mult(V.Local.sHours(1).Float,60,V.Local.sHours(1))
			F.Intrinsic.Math.Add(V.Local.sHours(0).Float,V.Local.sHours(1).Float,V.Local.fHours)
			V.Local.sHours.Redim(0,0)
			V.Local.sHours.Set("")
			F.Intrinsic.Date.TimeSerial(01,00,00,V.Local.dHours)
			F.Intrinsic.String.Format(V.Local.dHours,"hhnn",V.Local.sTimeIn)
			' add the run time to 1:00AM, format as hhmm
			F.Intrinsic.Date.DateAdd("N",V.Local.fHours,V.Local.dHours,V.Local.dHours)
			F.Intrinsic.String.Format(V.Local.dHours,"hhnn",V.Local.sTimeOut)
			' Rate Type is Regular
			V.Local.sRateType.Set("R")
			' Pieces Complete; multiply by 1000 for implied decimal
			F.Intrinsic.Math.Mult(V.Local.items(3),10000,V.Local.fQty)
			F.Intrinsic.String.Format(V.Local.fQty,"0",V.Local.sGood)
			' Scrap/Scrap Reason; not reported here
			V.Local.sScrap.Set("0")
			V.Local.sReason.Set("0")

			' concat labor information to a line,
			' This information will be written to a file named MOPEN.txt, which will be sent to JB0455 to create the Labor detail record on the job.
			' This is a tab delimited file, with fields:
			' Date, Employee, Job, Suffix, Seq, Workcenter, Hours, Closed, Indirect, Start-Time, Stop Time, Rate type, Good Pcs, Scrap Pcs, Reason
			F.Intrinsic.String.Build("{0}{1}{2}{3}{2}{4}{2}{5}{2}{6}{2}{7}{2}{8}",V.Local.sLaborData,V.Local.date,V.Ambient.Tab,V.Local.sEmployee,V.Local.job,V.Local.suffix,V.Local.seq,V.Local.sWC,V.Local.sHours,V.Local.sLaborData)
			F.Intrinsic.String.Build("{0}{1}{2}{1}{3}{1}{4}{1}{5}{1}{6}{1}{7}{1}{8}{1}{9}{10}",V.Local.sLaborData,V.Ambient.Tab,V.Local.sClosed,V.Local.sDirect,V.Local.sTimeIn,V.Local.sTimeOut,V.Local.sRateType,V.Local.sGood,V.Local.sScrap,V.Local.sReason,V.Ambient.NewLine,V.Local.sLaborData)
						
'**************************MATERIAL***********************************
			V.Local.fQty.Set(0)
			F.Intrinsic.String.Build("select Seq from Job_Operations where Job = '{0}' and Suffix = '{1}' and LMO = 'M' and Seq < '{2}' order by Seq desc",V.Local.job,V.Local.suffix,V.Local.seq,V.Local.sSel)
			F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)
			F.Intrinsic.String.Replace(V.Local.sRet,"#$#","",V.Local.sRet)
			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
			V.Local.sRet.RedimPreserve(0,0)
			F.Intrinsic.Control.If(V.Local.sRet(0).Trim,<>,"")
				F.Intrinsic.String.Build("_{0}",V.Local.items(12),V.Local.sHeat)
				F.Intrinsic.String.Replace(V.Local.items(8),V.Local.sHeat,"",V.Local.sPart)
				
				' (6) is the nested area for the sequence, (29) is the sheet area
				F.Intrinsic.Control.If(V.Local.items(29),<>,0)
				
					V.Local.sOriginialSheetName.Set(V.Local.items(32))					
					F.Intrinsic.String.Build("SELECT TOP 1 Length * Width FROM V_Inventory_Mst2 WHERE Part = '{0}'",V.Local.sOriginialSheetName,V.Local.sSel)
					F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sOriginialSheetArea)
					F.Intrinsic.String.Replace(V.Local.sOriginialSheetArea,"#$#","",V.Local.sOriginialSheetArea)
					F.Intrinsic.String.Split(V.Local.sOriginialSheetArea,"*!*",V.Local.sOriginialSheetArea)
					V.Local.sOriginialSheetArea.RedimPreserve(0,0)
					
					F.Intrinsic.Math.Round(V.Local.items(6),4,V.Local.fNestArea)
					
					f.Intrinsic.Control.If(V.Local.sOriginialSheetArea.Float,<>,0)
						F.Intrinsic.Math.Div(V.Local.fNestArea,V.Local.sOriginialSheetArea.Float,V.Local.fQty)
					f.Intrinsic.Control.Else
						v.Local.fQty.Set(0)
					f.Intrinsic.Control.EndIf
					
					F.Intrinsic.Math.Mult(V.Local.fQty,V.Local.items(4).Float,V.Local.fQty)
					F.Intrinsic.Math.Round(V.Local.fQty,4,V.Local.fQty)
					
				F.Intrinsic.Control.EndIf
				' concat Material informaiton to a line
				' This information till be written to a file named LMOPEN.txt, which will be sent to WIR100, to create the material issue to the job
				' This is a comma delimited file, qith fields:
				F.Intrinsic.String.Split(V.Local.items(8),"_",V.Local.sSheet)
				V.Local.sSheet.RedimPreserve(0,1)
				
				F.Intrinsic.Control.If(V.Local.sSheet(0),<>,V.Local.items(32))
					V.Local.sSerial.Set(V.Local.sSheet(0))
				F.Intrinsic.Control.Else
					V.Local.sSerial.Set("")
				F.Intrinsic.Control.EndIf
				
										' Part, Rev, Loc, Qty, Lot, Bin, Heat, Serial, Job, Suffix, Seq
				F.Intrinsic.String.Build("{0}{1},,{11},{2},{3},{4},{5},{6},{7},{8},{9}{10}",V.Local.sMaterialData,V.Local.sPart.Trim,V.Local.fQty.Format0.0000,V.Local.items(14),V.Local.items(13),V.Local.items(12),V.Local.sSerial,V.Local.job,V.Local.suffix,V.Local.sRet(0).Trim,V.Ambient.NewLine,V.Local.items(11),V.Local.sMaterialData)
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.Lcount)


'************************LOAD DATA one file at a time*****************************
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Local.sLaborFile)
	F.Intrinsic.File.String2File(V.Local.sLaborFile,V.Local.sLaborData)
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Caller.CompanyCode,V.Caller.Terminal,"LABOR-COPY.txt",V.Local.sLaborFile)
	F.Intrinsic.File.String2File(V.Local.sLaborFile,V.Local.sLaborData)
	F.Intrinsic.String.Concat(V.Ambient.DblQuote,V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Ambient.DblQuote,V.Local.sLaborFile)
	F.Intrinsic.Task.LaunchGSSSync("JB0455","-C",V.Local.sLaborFile)

	' NOTE: WIR100 now has a callwrapper 450100 that can be used instead
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\L",V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Local.sLaborFile)
	F.Intrinsic.File.String2File(V.Local.sLaborFile,V.Local.sMaterialData)
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\L",V.Caller.CompanyCode,V.Caller.Terminal,"MATERIAL-COPY.txt",V.Local.sLaborFile)
	F.Intrinsic.File.String2File(V.Local.sLaborFile,V.Local.sMaterialData)
	F.Intrinsic.String.Concat("L",V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Local.sLaborFile)
	'F.Intrinsic.Task.LaunchGSSSync("WIR100","-C",V.Local.sLaborFile)
	f.Global.General.CallWrapperSync(450100,v.Local.sLaborFile)
	
	'Clearing out the Labor and Material Data. These don't need to be uploaded multiple times....
	V.Local.sMaterialData.Set("")
	V.Local.sLaborData.Set("")

F.Intrinsic.Control.Next(V.Local.count)

F.Intrinsic.UI.CloseWaitDialog
F.Intrinsic.Control.Label("EXIT")
F.ODBC.Connection!Conx.Close

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Get_File_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3849_SigmaNest_To_GSS-MET.gss",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.Debug.SetLA(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Get_File.End

Program.Sub.Unload.Start

'F.ODBC.Connection!Conx.Close
F.Intrinsic.Control.End

Program.Sub.Unload.End

Program.Sub.LicenseVerification.Start

V.Local.bLicensed.Declare(Boolean)

' if license is not found, the script will end
f.Global.General.IsLicensedByModuleName("NES",v.Local.bLicensed)
F.Intrinsic.Control.If(V.Local.bLicensed,=,False)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

Program.Sub.LicenseVerification.End

Program.Sub.FilePath.Start

V.Local.sSel.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sHold.Declare(String)
V.Local.sVal.Declare(String)
V.Local.bRet.Declare(Boolean)
V.Local.sFile.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sEmployee.Declare(String)

' see if the credential file is found
F.Intrinsic.String.Build("{0}\SNLIC.dat",V.Caller.FilesDir,V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bRet)

' if the file is found, look for the COMPLETE line
F.Intrinsic.Control.If(V.Local.bRet,=,True)
	F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sRet)
	F.Intrinsic.String.Split(V.Local.sRet,V.Ambient.NewLine,V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iFor,V.Local.sRet.LBound,V.Local.sRet.UBound,1)
		F.Intrinsic.String.Split(V.Local.sRet(v.Local.iFor),"::",V.Local.sHold)
		V.Local.sHold.RedimPreserve(0,1)
		F.Intrinsic.Control.SelectCase(V.Local.sHold(0))
		' for SN -> GS
		F.Intrinsic.Control.Case("COMPLETE")
			V.Local.sVal.Set(V.Local.sHold(1))
			F.Intrinsic.String.Right(V.Local.sVal,1,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,<>,"\")
				F.Intrinsic.String.Build("{0}\",V.Local.sVal,V.Local.sVal)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.ExitFor(V.Local.iFor)
		' for SN machine employee
		F.Intrinsic.Control.Case("NESTEMPLOYEE")
			V.Local.sEmployee.Set(V.Local.sHold(1))
		F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.Next(V.Local.iFor)
F.Intrinsic.Control.EndIf

' if the path is found,send it back.  otherwise end the script
F.Intrinsic.Control.If(V.Local.sVal,=,"")
	F.Intrinsic.UI.Msgbox("INPUT file path not found.")
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("FILELOC",V.Local.sVal)
F.Intrinsic.Variable.AddRV("EMPLOYEE",V.Local.sEmployee)

Program.Sub.FilePath.End


