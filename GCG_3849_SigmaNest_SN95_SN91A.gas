Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start

Variable.UDT.Transaction.Define("PART",String,"PART")
Variable.uGlobal.uTrans.Declare("Transaction")
Variable.Global.iHndl.Declare(Long,0)
Variable.Global.sProvider.Declare(String)
Variable.Global.sServer.Declare(String)
Variable.Global.sUID.Declare(String)
Variable.Global.sPWD.Declare(String)
Variable.Global.sDatabase.Declare(String)
Program.Sub.Preflight.End


Program.Sub.Main.Start


' verify the license
F.Intrinsic.Control.CallSub(Licenseverification)
' read SNLIC.dat to determine path for writing the transaction file
F.Intrinsic.Control.CallSub(Getfilepath)
F.Intrinsic.Control.CallSub(Sn95,"FILE",V.Args.FILE)
F.Intrinsic.Control.CallSub(Sn91a,"FILE",V.Args.FILE)
F.Intrinsic.Control.CallSub(Unload)

Program.Sub.Main.End


Program.Sub.Unload.Start


F.Intrinsic.Control.End

Program.Sub.Unload.End


Program.Sub.SN91A.Start
F.Intrinsic.Control.SetErrorHandler("SN91A_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSel.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sLines.Declare(String)
V.Local.i.Declare(Long)
V.Local.sRecord.Declare(String)
V.Local.sHold.Declare(String)
V.Local.sFileText.Declare(String)
V.Local.sLogin.Declare(String)
V.Local.sInProcess.Declare(String)
V.Local.sPL.Declare(String)
V.Local.sHeat.Declare(String)

' connect to the databases
' GS
F.ODBC.Connection!Con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)
' SN
F.Intrinsic.String.Build("Provider={0};Server={1};Database={2};Uid={3};Pwd={4};",V.Global.sProvider,V.Global.sServer,V.Global.sDatabase,V.Global.sUID,V.Global.sPWD,V.Local.sLogin)
F.ODBC.Connection!ConSN.OpenConnection(V.Local.sLogin)

F.Intrinsic.UI.InvokeWaitDialog("Sending Data to Sigma Nest")
F.Intrinsic.File.File2String(V.Args.FILE,V.Local.sFileText)
' find applicable product lines
F.Intrinsic.Control.CallSub(Productlines)

' if no applicale PLs are found, the return will be "1"
F.Intrinsic.Control.SelectCase(V.Args.PLLIST)
F.Intrinsic.Control.Case("1")
	F.Intrinsic.Control.ExitSub

' found PLs, get details for import
F.Intrinsic.Control.CaseElse
	' find Inventory Part Details
'	F.Intrinsic.String.Build("select Part, (Qty_OnHand - Qty_Required) as Qty_OnHand, Location, Amt_Cost from Inventory_Mstr where Product_line in ('{0}') ",V.Args.PLLIST,V.Local.sSel)
'JOINED ITEM MASTER WITH BLANK SERIAL SO ONLY THE FULL SHEETS GET PASSED TO SN FROM GS, SN ALREADY HAS REM INFORMATION
	F.Intrinsic.String.Build("select MST.Part, MST.LOCATION, ITEM.LOT, ITEM.BIN, ITEM.HEAT,  ITEM.QUANTITY, MST.Amt_Cost from Inventory_Mstr AS MST JOIN ITEM_MASTER AS ITEM ON MST.PART = ITEM.PART where MST.Product_line in ('{0}') AND ITEM.SERIAL_NUMBER = '' ",V.Args.PLLIST,V.Local.sSel)

	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)
	F.Intrinsic.Control.SelectCase(V.Local.sRet)
	' no applicable parts, exit now
	F.Intrinsic.Control.Case("")
		F.Intrinsic.Control.ExitSub

	' found oarts, get additional information
	F.Intrinsic.Control.CaseElse
		F.Intrinsic.String.Split(V.Local.sRet,"#$#",V.Local.sLines)
		F.Intrinsic.Control.For(V.Local.i,V.Local.sLines.LBound,V.Local.sLines.UBound,1)
			F.Intrinsic.String.Split(V.Local.sLines(v.Local.i),"*!*",V.Local.sHold)
			V.Local.sHold.RedimPreserve(0,7)

			' clear previous data
			V.Local.sRecord.Redim(0,64)
			V.Local.sRecord(0).Set("SN91A")
			V.Local.sRecord(1).Set("1")

			' Prime Code = Part
			V.Local.sRecord(26).Set(V.Local.sHold(0).Trim)

			' sheet/item = Part
			F.Intrinsic.String.Build("{0}_{1}",V.Local.sHold(0).Trim,V.Local.sHold(4).Trim,V.Local.sHeat)
'			V.Local.sRecord(4).Set(V.Local.sHold(0).Trim)
			V.Local.sRecord(4).Set(V.Local.sHeat.Trim)
			' Location
			V.Local.sRecord(24).Set(V.Local.sHold(1).Trim)
			'bin
			V.Local.sRecord(23).Set(V.Local.sHold(3).Trim)
			''heat
			V.Local.sRecord(19).Set(V.Local.sHold(4).Trim)
			'lot
			V.Local.sRecord(25).Set(V.Local.sHold(2).Trim)
			' Cost
			V.Local.sRecord(18).Set(V.Local.sHold(6).Format*0.00)
			' Qty - whole sheets, subtract SN qty in process
			F.Intrinsic.String.Build("select SUM(QtyInProcess) as QtyInProcess from Program where SheetName = '{0}' ",V.Local.sHold(0).Trim,V.Local.sSel)
			F.ODBC.Connection!ConSN.OpenRecordsetRO("rstSel",V.Local.sSel)
				V.Local.sInProcess.Set(V.ODBC.ConSN!rstSel.FieldVal!QtyInProcess)
			F.ODBC.ConSN!rstSel.Close
			F.Intrinsic.Math.Sub(V.Local.sHold(5).Float,V.Local.sInProcess.Float,V.Local.sHold(5).Float)
			V.Local.sRecord(5).Set(V.Local.sHold(5).format0.00)

			F.Intrinsic.String.Build(" select Length, Width, Description_3 from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",V.Local.sHold(0).Trim,V.Local.sHold(1).Trim,V.Local.sSel)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)
			F.Intrinsic.Control.SelectCase(V.Local.sRet)
			F.Intrinsic.Control.Case("")
				V.Local.sRecord(6).Set("")

			F.Intrinsic.Control.CaseElse
				F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
				V.Local.sRet.RedimPreserve(0,2)
				' Length
				V.Local.sRecord(14).Set(V.Local.sRet(0).Format0.00)
				' Width
				V.Local.sRecord(15).Set(V.Local.sRet(1).Format0.00)
				' Material
				V.Local.sRecord(6).Set(V.Local.sRet(2).Trim)
			F.Intrinsic.Control.EndSelect

			F.Intrinsic.String.Build("select Thickness from Inventory_Mst3 where Part = '{0}' and Location = '{1}' ",V.Local.sHold(0).Trim,V.Local.sHold(1).Trim,V.Local.sSel)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)
			' Thickness
			V.Local.sRecord(7).Set(V.Local.sRet.Trim)

			F.Intrinsic.String.JoinCSV(V.Local.sRecord,False,V.Local.sHold)
			F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sFileText,V.Local.sHold,V.Ambient.NewLine,V.Local.sFileText)

		F.Intrinsic.Control.Next(V.Local.i)
	F.Intrinsic.Control.EndSelect
F.Intrinsic.Control.EndSelect


'	' get part details
'	V.Local.sSel.Set("select distinct c.Lot, c.Quantity, c.Serial_Number, a.PART, c.Heat, c.Bin, c.Unit_Cost, c.Location, a.Product_line from INVENTORY_MSTR a, V_PRODUCT_LINE b, Item_Master c where a.Part = c.Part and a.Location = c.Location and a.PRODUCT_LINE=b.PRODUCT_LINE and b.PRODUCT_LINE_DESC ='RAW' order by a.PART, c.Lot, c.Bin, c.Heat, c.Serial_Number")
'	'V.Local.sSel.Set("select distinct '' AS LOT, a.QTY_ONHAND, '' as Serial_Number, a.PART, '' as Heat, '' as Bin, a.Amt_Cost, a.Location, a.Product_line from INVENTORY_MSTR a, V_PRODUCT_LINE b where  a.PRODUCT_LINE=b.PRODUCT_LINE and b.PRODUCT_LINE_DESC ='RAW' order by a.PART")
'	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)
'	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
'		F.Intrinsic.String.Split(V.Local.sRet,"#$#",V.Local.sLines)
'		F.Intrinsic.Control.For(V.Local.iFor,V.Local.sLines.LBound,V.Local.sLines.UBound,1)
'			F.Intrinsic.String.Split(V.Local.sLines(v.Local.iFor),"*!*",V.Local.sHold)
'			V.Local.sHold.RedimPreserve(0,8)
'			' clear previous data
'			V.Local.sRecord.Redim(0,64)
'			V.Local.sRecord(0).Set("SN91A")
'			V.Local.sRecord(1).Set("1")
'			' sheet/item
'			V.Local.sRecord(4).Set(V.Local.sHold(3).Trim)
'			' Qty
'			' subtract SN qty in process
'			F.Intrinsic.String.Build("select SUM(QtyInProcess) as QtyInProcess from Program where SheetName = '{0}' ",V.Local.sHold(0).Trim,V.Local.sSel)
'			F.ODBC.Connection!ConSN.OpenRecordsetRO("rstSel",V.Local.sSel)
'				V.Local.sInProcess.Set(V.ODBC.ConSN!rstSel.FieldVal!QtyInProcess)
'			F.ODBC.ConSN!rstSel.Close
'
'			F.Intrinsic.Math.Sub(V.Local.sHold(1).Float,V.Local.sInProcess.Float,V.Local.sHold(1).Float)
'			V.Local.sRecord(5).Set(V.Local.sHold(1).format*0.00)
			' Mill - Serial
'			V.Local.sRecord(25).Set(V.Local.sHold(2).Trim)
'			' Prime Code - Part
'			V.Local.sRecord(26).Set(V.Local.sHold(3).Trim)
			' Heat
'			V.Local.sRecord(19).Set(V.Local.sHold(4).Trim)
			' Bin
'			V.Local.sRecord(23).Set(V.Local.sHold(5).Trim)
'			' Location
'			V.Local.sRecord(24).Set(V.Local.sHold(7).Trim)
'			' Cost
'			V.Local.sRecord(18).Set(V.Local.sHold(6).Format*0.00)

'			F.Intrinsic.String.Build(" select LENGTH,WIDTH,DESCRIPTION_3 from INVENTORY_MST2 where Part = '{0}' and Location = '{1}' ",V.Local.sHold(3).Trim,V.Local.sHold(7).Trim,V.Local.sSel)
'			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)
'			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
'				F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
'				V.Local.sRet.RedimPreserve(0,2)
'				' Length
'				V.Local.sRecord(14).Set(V.Local.sRet(0).Trim)
'				' Width
'				V.Local.sRecord(15).Set(V.Local.sRet(1).Trim)
'				' Material
'				V.Local.sRecord(6).Set(V.Local.sRet(2).Trim)
'			F.Intrinsic.Control.Else
'				V.Local.sRecord(6).Set("")
'			F.Intrinsic.Control.EndIf
'
'			F.Intrinsic.String.Build("select Thickness from Inventory_Mst3 where Part = '{0}' and Location = '{1}' ",V.Local.sHold(3).Trim,V.Local.sHold(7).Trim,V.Local.sSel)
'			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)
'			' Thickness
'			V.Local.sRecord(7).Set(V.Local.sRet.Trim)
'
'			F.Intrinsic.String.JoinCSV(V.Local.sRecord,False,V.Local.sHold)
'			F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sFileText,V.Local.sHold,V.Ambient.NewLine,V.Local.sFileText)
'
'		F.Intrinsic.Control.Next(V.Local.iFor)
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.If(V.Local.sFileText.Trim,<>,"")
	F.Intrinsic.File.String2File(V.Args.FILE,V.Local.sFileText)
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.CloseWaitDialog

' disconnect from the databases
F.ODBC.Connection!ConSN.Close
F.ODBC.Connection!Con.Close

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SN91A_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3849_SigmaNest_SN95_SN91A.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.Debug.SetLA(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.SN91A.End


Program.Sub.getFilePath.Start
F.Intrinsic.Control.SetErrorHandler("getFilePath_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSNLIC.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sNow.Declare(String)
V.Local.sText.Declare(String)
V.Local.sFilePath.Declare(String)
V.Local.iFor.Declare(Long)
'V.Local.sVals.Declare(String)
V.Local.iFoundRecs.Declare(Long)
V.Local.sHold.Declare(String)

' see if the SNLIC file is found.  If found, read the file path from there
F.Intrinsic.String.Build("{0}\SNLIC.dat",V.Caller.FilesDir,V.Local.sSNLIC)
F.Intrinsic.File.Exists(V.Local.sSNLIC,V.Local.bExists)
f.Intrinsic.File.MakeFilenameFriendly(v.Ambient.Now,v.Local.sNow)

F.Intrinsic.Control.If(V.Local.bExists,=,True)
	F.Intrinsic.File.File2String(V.Local.sSNLIC,V.Local.sText)
	F.Intrinsic.String.Split(V.Local.sText,V.Ambient.NewLine,V.Local.sText)
	F.Intrinsic.Control.For(V.Local.iFor,V.Local.sText.LBound,V.Local.sText.UBound,1)
		F.Intrinsic.String.Split(V.Local.sText(v.Local.iFor),"::",V.Local.sHold)
		V.Local.sHold.RedimPreserve(0,1)
		F.Intrinsic.Control.SelectCase(V.Local.sHold(0).UCase)
			F.Intrinsic.Control.Case("INPUT")
				F.Intrinsic.String.Build("{0}\{1}.txt",V.Local.sHold(1).Trim,V.Local.sNow,V.Local.sFilePath)
			F.Intrinsic.Control.Case("PROVIDER")
				V.Global.sProvider.Set(V.Local.sHold(1))
				F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
			F.Intrinsic.Control.Case("SERVER")
				V.Global.sServer.Set(V.Local.sHold(1))
				F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
			F.Intrinsic.Control.Case("DATABASE")
				V.Global.sDatabase.Set(V.Local.sHold(1))
				F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
			F.Intrinsic.Control.Case("UID")
				V.Global.sUID.Set(V.Local.sHold(1))
				F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
			F.Intrinsic.Control.Case("PWD")
				V.Global.sPWD.Set(V.Local.sHold(1))
				F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
		F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.Next(V.Local.iFor)

' if the SNLIC does not exist, it will be the originally coded default
F.Intrinsic.Control.Else
	F.Intrinsic.String.Concat("H:\SimTrans\FileConversion\FileInput","\",V.Local.sNow,".txt",V.Local.sFilePath)
F.Intrinsic.Control.EndIf

' if login credentials are not found, alert the user
F.Intrinsic.Control.If(V.Local.iFoundRecs,<>,5)
	F.Intrinsic.UI.Msgbox("Data connection credentials not found.")
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("FILE",V.Local.sFilePath)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("getFilePath_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3849_SigmaNest_SN95_SN91A.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.Debug.SetLA(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.getFilePath.End


Program.Sub.Licenseverification.Start
F.Intrinsic.Control.SetErrorHandler("Licenseverification_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.bLicensed.Declare(Boolean)

' if license is not found, the script will end
f.Global.General.IsLicensedByModuleName("NES",v.Local.bLicensed)
F.Intrinsic.Control.If(V.Local.bLicensed,=,False)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Licenseverification_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_3849_SigmaNest_SN95_SN91A.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.Debug.SetLA(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.Licenseverification.End


Program.Sub.SN95.Start


' SN95 removes all prime sheets and coils from the stock library except if the sheet or coil is in-process
' only field value needed is the transaction code

V.Local.sRecord.Declare(String)
V.Local.sFileText.Declare(String)

V.Local.sRecord.Redim(0,64)
V.Local.sRecord(0).Set("SN95")
V.Local.sRecord(1).Set("1")
F.Intrinsic.String.JoinCSV(V.Local.sRecord,False,V.Local.sFileText)
F.Intrinsic.String.Build("{0}{1}",V.Local.sFileText,V.Ambient.NewLine,V.Local.sFileText)
F.Intrinsic.File.String2File(V.Args.FILE,V.Local.sFileText)

Program.Sub.SN95.End


Program.Sub.ProductLines.Start

V.Local.sPL.Declare(String)


' get list of Nesting PLs
F.ODBC.Connection!Con.ExecuteAndReturn("select Product_Line from v_Product_Line where Nesting_Interface = 'Y' ",V.Local.sPL)
F.Intrinsic.Control.SelectCase(V.Local.sPL)
F.Intrinsic.Control.Case("")
	V.Local.sPL.Set("1")
F.Intrinsic.Control.CaseElse
	F.Intrinsic.String.Replace(V.Local.sPL,"*!*","",V.Local.sPL)
	F.Intrinsic.String.Replace(V.Local.sPL,"#$#","','",V.Local.sPL)
F.Intrinsic.Control.EndSelect

F.Intrinsic.Variable.AddRV("PLLIST",V.Local.sPL)

Program.Sub.ProductLines.End



